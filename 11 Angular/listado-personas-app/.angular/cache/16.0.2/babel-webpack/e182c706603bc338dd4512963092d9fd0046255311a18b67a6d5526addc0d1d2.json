{"ast":null,"code":"import { EventEmitter } from \"@angular/core\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./logging.service\";\nimport * as i2 from \"./data.service\";\nclass PersonasService {\n  constructor(loggingService, dataService) {\n    this.loggingService = loggingService;\n    this.dataService = dataService;\n    this.personas = [];\n    // personas:Persona[]=[\n    //   new Persona('Victor','CG'),\n    //   new Persona('Grace','CG'),\n    //   new Persona('Elon','CG')];\n    this.saludar = new EventEmitter();\n  }\n  agregarPersona(persona) {\n    this.loggingService.enviaMensajeAconsoloca(\"agregamos a una personas: \" + persona.nombre);\n    if (this.personas == null) {\n      this.personas = [];\n    }\n    this.personas.push(persona);\n    this.dataService.guardarPersonas(this.personas);\n  }\n  encontrarPersona(i) {\n    let persona = this.personas[i];\n    return persona;\n  }\n  modificarPersona(i, persona) {\n    let persona2 = this.personas[i];\n    persona2.nombre = persona.nombre;\n    persona2.apellido = persona.apellido;\n    this.personas[i] = persona2; //Esta linea se puede oviar por que los datos son pasados por referencia\n    this.dataService.modificarPersona(i, persona);\n  }\n  eliminarPersona(i) {\n    this.personas.splice(i, 1);\n    this.dataService.eliminarPersona(i);\n    //se vuelve a guardar el arreglo\n    this.modificarPersonas();\n  }\n  obtenerPersonas() {\n    return this.dataService.cargarPersonas();\n  }\n  setPersonas(personas) {\n    this.personas = personas;\n  }\n  modificarPersonas() {\n    if (this.personas != null) {\n      this.dataService.guardarPersonas(this.personas);\n    }\n  }\n}\nPersonasService.ɵfac = function PersonasService_Factory(t) {\n  return new (t || PersonasService)(i0.ɵɵinject(i1.LoggingService), i0.ɵɵinject(i2.DataServices));\n};\nPersonasService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: PersonasService,\n  factory: PersonasService.ɵfac\n});\nexport { PersonasService };","map":{"version":3,"names":["EventEmitter","PersonasService","constructor","loggingService","dataService","personas","saludar","agregarPersona","persona","enviaMensajeAconsoloca","nombre","push","guardarPersonas","encontrarPersona","i","modificarPersona","persona2","apellido","eliminarPersona","splice","modificarPersonas","obtenerPersonas","cargarPersonas","setPersonas","i0","ɵɵinject","i1","LoggingService","i2","DataServices","factory","ɵfac"],"sources":["C:\\Users\\VIC\\Documents\\VICTOR CRUZ GOMEZ\\Master Desarrollo\\Desarrollo web\\11 Angular\\listado-personas-app\\src\\app\\personas.service.ts"],"sourcesContent":["import { EventEmitter, Injectable } from \"@angular/core\";\r\nimport { Persona } from \"./persona.model\";\r\nimport { LoggingService } from \"./logging.service\";\r\nimport { DataServices } from \"./data.service\";\r\n\r\n@Injectable()\r\nexport class PersonasService{\r\n  personas:Persona[]=[];\r\n  // personas:Persona[]=[\r\n  //   new Persona('Victor','CG'),\r\n  //   new Persona('Grace','CG'),\r\n  //   new Persona('Elon','CG')];\r\n\r\n  saludar=new EventEmitter<number>();\r\n\r\n  constructor(private loggingService:LoggingService,\r\n    private dataService:DataServices) {}\r\n\r\n  agregarPersona(persona:Persona){\r\n    this.loggingService.enviaMensajeAconsoloca(\"agregamos a una personas: \"+persona.nombre);\r\n    if (this.personas==null) {\r\n      this.personas=[];\r\n    }\r\n    this.personas.push(persona);\r\n    this.dataService.guardarPersonas(this.personas);\r\n  }\r\n\r\n  encontrarPersona(i: number) {\r\n    let persona:Persona=this.personas[i];\r\n    return persona;\r\n  }\r\n\r\n  modificarPersona(i: number, persona: Persona) {\r\n    let persona2:Persona=this.personas[i];\r\n    persona2.nombre=persona.nombre;\r\n    persona2.apellido=persona.apellido;\r\n    this.personas[i]=persona2; //Esta linea se puede oviar por que los datos son pasados por referencia\r\n    this.dataService.modificarPersona(i, persona);\r\n  }\r\n\r\n  eliminarPersona(i:number) {\r\n      this.personas.splice(i,1);\r\n      this.dataService.eliminarPersona(i);\r\n      //se vuelve a guardar el arreglo\r\n      this.modificarPersonas();\r\n  }\r\n\r\n  obtenerPersonas(){\r\n    return this.dataService.cargarPersonas();\r\n  }\r\n\r\n  setPersonas(personas: Persona[]) {\r\n    this.personas=personas;\r\n  }\r\n\r\n  modificarPersonas(){\r\n    if (this.personas!=null) {\r\n      this.dataService.guardarPersonas(this.personas);\r\n    }\r\n  }\r\n}\r\n"],"mappings":"AAAA,SAASA,YAAY,QAAoB,eAAe;;;;AAKxD,MACaC,eAAe;EAS1BC,YAAoBC,cAA6B,EACvCC,WAAwB;IADd,KAAAD,cAAc,GAAdA,cAAc;IACxB,KAAAC,WAAW,GAAXA,WAAW;IATrB,KAAAC,QAAQ,GAAW,EAAE;IACrB;IACA;IACA;IACA;IAEA,KAAAC,OAAO,GAAC,IAAIN,YAAY,EAAU;EAGG;EAErCO,cAAcA,CAACC,OAAe;IAC5B,IAAI,CAACL,cAAc,CAACM,sBAAsB,CAAC,4BAA4B,GAACD,OAAO,CAACE,MAAM,CAAC;IACvF,IAAI,IAAI,CAACL,QAAQ,IAAE,IAAI,EAAE;MACvB,IAAI,CAACA,QAAQ,GAAC,EAAE;;IAElB,IAAI,CAACA,QAAQ,CAACM,IAAI,CAACH,OAAO,CAAC;IAC3B,IAAI,CAACJ,WAAW,CAACQ,eAAe,CAAC,IAAI,CAACP,QAAQ,CAAC;EACjD;EAEAQ,gBAAgBA,CAACC,CAAS;IACxB,IAAIN,OAAO,GAAS,IAAI,CAACH,QAAQ,CAACS,CAAC,CAAC;IACpC,OAAON,OAAO;EAChB;EAEAO,gBAAgBA,CAACD,CAAS,EAAEN,OAAgB;IAC1C,IAAIQ,QAAQ,GAAS,IAAI,CAACX,QAAQ,CAACS,CAAC,CAAC;IACrCE,QAAQ,CAACN,MAAM,GAACF,OAAO,CAACE,MAAM;IAC9BM,QAAQ,CAACC,QAAQ,GAACT,OAAO,CAACS,QAAQ;IAClC,IAAI,CAACZ,QAAQ,CAACS,CAAC,CAAC,GAACE,QAAQ,CAAC,CAAC;IAC3B,IAAI,CAACZ,WAAW,CAACW,gBAAgB,CAACD,CAAC,EAAEN,OAAO,CAAC;EAC/C;EAEAU,eAAeA,CAACJ,CAAQ;IACpB,IAAI,CAACT,QAAQ,CAACc,MAAM,CAACL,CAAC,EAAC,CAAC,CAAC;IACzB,IAAI,CAACV,WAAW,CAACc,eAAe,CAACJ,CAAC,CAAC;IACnC;IACA,IAAI,CAACM,iBAAiB,EAAE;EAC5B;EAEAC,eAAeA,CAAA;IACb,OAAO,IAAI,CAACjB,WAAW,CAACkB,cAAc,EAAE;EAC1C;EAEAC,WAAWA,CAAClB,QAAmB;IAC7B,IAAI,CAACA,QAAQ,GAACA,QAAQ;EACxB;EAEAe,iBAAiBA,CAAA;IACf,IAAI,IAAI,CAACf,QAAQ,IAAE,IAAI,EAAE;MACvB,IAAI,CAACD,WAAW,CAACQ,eAAe,CAAC,IAAI,CAACP,QAAQ,CAAC;;EAEnD;;AArDWJ,eAAe,C;mBAAfA,eAAe,EAAAuB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,cAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,YAAA;AAAA;AAAf5B,eAAe,C;SAAfA,eAAe;EAAA6B,OAAA,EAAf7B,eAAe,CAAA8B;AAAA;SAAf9B,eAAe"},"metadata":{},"sourceType":"module","externalDependencies":[]}